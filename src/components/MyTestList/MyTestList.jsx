import React, { useState, useEffect } from 'react';
import './MyTestList.css';

const MyTestList = ({ onActionComplete }) => {
    const [tests, setTests] = useState([]);
    const [categories, setCategories] = useState([]);
    const [themes, setThemes] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [filters, setFilters] = useState({
        category: '',
        theme: ''
    });

    // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const fetchTests = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem('jwtToken');
            
            if (!token) {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            }

            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/my-tests`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã');
            }

            const { data } = await response.json();
            setTests(data || []);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–º—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            const uniqueCategories = [...new Set(data.map(test => test.category))].filter(Boolean);
            const uniqueThemes = [...new Set(data.map(test => test.theme))].filter(Boolean);
            
            setCategories(uniqueCategories);
            setThemes(uniqueThemes);

        } catch (err) {
            setError(err.message);
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤:', err);
        } finally {
            setLoading(false);
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    const deleteTest = async (testId) => {
        try {
            const token = localStorage.getItem('jwtToken');
            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/my-tests/${testId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç');
            }

            await fetchTests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            if (onActionComplete) onActionComplete();
        } catch (err) {
            setError(err.message);
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', err);
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞
    const toggleTestStatus = async (testId, currentStatus) => {
        try {
            const token = localStorage.getItem('jwtToken');
            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/api/my-tests/${testId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ public: !currentStatus })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞');
            }

            await fetchTests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (onActionComplete) onActionComplete();
        } catch (err) {
            setError(err.message);
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞:', err);
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    const filteredTests = tests.filter(test => {
        const matchesCategory = !filters.category || test.category === filters.category;
        const matchesTheme = !filters.theme || test.theme === filters.theme;
        return matchesCategory && matchesTheme;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({
            ...prev,
            [name]: value,
            ...(name === 'category' ? { theme: '' } : {}) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–º—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }));
    };

    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const resetFilters = () => {
        setFilters({ category: '', theme: '' });
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        fetchTests();
    }, []);

    if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤...</div>;
    if (error) return <div className="error">–û—à–∏–±–∫–∞: {error}</div>;

    return (
        <div className="test-list-container">
            <h2>–ú–æ–∏ –¢–µ—Å—Ç—ã</h2>
            
            {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
            <div className="filters-panel">
                <div className="filter-group">
                    <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                    <select
                        name="category"
                        value={filters.category}
                        onChange={handleFilterChange}
                    >
                        <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                        {categories.map((category, index) => (
                            <option key={index} value={category}>{category}</option>
                        ))}
                    </select>
                </div>

                <div className="filter-group">
                    <label>–¢–µ–º–∞:</label>
                    <select
                        name="theme"
                        value={filters.theme}
                        onChange={handleFilterChange}
                        disabled={!filters.category}
                    >
                        <option value="">–í—Å–µ —Ç–µ–º—ã</option>
                        {themes
                            .filter(theme => 
                                !filters.category || 
                                tests.some(test => test.category === filters.category && test.theme === theme)
                            )
                            .map((theme, index) => (
                                <option key={index} value={theme}>{theme}</option>
                            ))
                        }
                    </select>
                </div>

                <button onClick={resetFilters} className="reset-filters-btn">
                    –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ */}
            {filteredTests.length === 0 ? (
                <p className="no-tests">
                    {tests.length === 0 ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤' : '–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º'}
                </p>
            ) : (
                <div className="tests-grid">
                    {filteredTests.map(test => (
                        <div key={test.id} className="test-card">
                            <div className="test-content">
                                <h3 className="test-name">{test.name}</h3>
                                <div className="test-meta">
                                    <span className="test-category">{test.category}</span>
                                    {test.theme && <span className="test-theme">{test.theme}</span>}
                                    <span className={`test-status ${test.public ? 'public' : 'private'}`}>
                                        {test.public ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}
                                    </span>
                                </div>
                            </div>
                            <div className="test-actions">
                                <button
                                    className="delete-btn"
                                    onClick={() => deleteTest(test.id)}
                                    title="–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"
                                >
                                    √ó
                                </button>
                                <button
                                    className={`status-toggle-btn ${test.public ? 'public' : 'private'}`}
                                    onClick={() => toggleTestStatus(test.id, test.public)}
                                    title={test.public ? '–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º' : '–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º'}
                                >
                                    {test.public ? 'üåê' : 'üîí'}
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default MyTestList;